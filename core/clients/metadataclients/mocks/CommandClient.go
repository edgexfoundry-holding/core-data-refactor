// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/edgex-go/core/domain/models"

// CommandClient is an autogenerated mock type for the CommandClient type
type MockCommandClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: com
func (_m *MockCommandClient) Add(com *models.Command) (string, error) {
	ret := _m.Called(com)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.Command) string); ok {
		r0 = rf(com)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Command) error); ok {
		r1 = rf(com)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Command provides a mock function with given fields: id
func (_m *MockCommandClient) Command(id string) (models.Command, error) {
	ret := _m.Called(id)

	var r0 models.Command
	if rf, ok := ret.Get(0).(func(string) models.Command); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Command)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commands provides a mock function with given fields:
func (_m *MockCommandClient) Commands() ([]models.Command, error) {
	ret := _m.Called()

	var r0 []models.Command
	if rf, ok := ret.Get(0).(func() []models.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommandsForName provides a mock function with given fields: name
func (_m *MockCommandClient) CommandsForName(name string) ([]models.Command, error) {
	ret := _m.Called(name)

	var r0 []models.Command
	if rf, ok := ret.Get(0).(func(string) []models.Command); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Command)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MockCommandClient) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: com
func (_m *MockCommandClient) Update(com models.Command) error {
	ret := _m.Called(com)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Command) error); ok {
		r0 = rf(com)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
